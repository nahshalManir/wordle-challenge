{"mappings":"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","sources":["app.js"],"sourcesContent":["\"use strict\";\r\n\r\n// Buttons\r\nconst btnOpenModal = document.querySelector(\".show-modal\");\r\nconst btnCloseModal = document.querySelector(\".close-modal\");\r\nconst modal = document.querySelector(\".modal\");\r\nconst resetGameBtn = document.querySelector('#reset--btn');\r\nconst overlay = document.querySelector(\".overlay\");\r\nconst keyboard = document.querySelectorAll(\".keyboard--key\");\r\nconst enterKey = document.querySelector(\"#enter-key\");\r\nconst body = document.querySelector(\"body\");\r\nconst msgContainer = document.querySelector(\".message--container\");\r\nconst guessContainer = document.querySelector('.guess--container');\r\nconst grayHintTile = document.querySelector('#hint--gray');\r\nconst yellowHintTile = document.querySelector('#hint--yellow');\r\nconst greenHintTile = document.querySelector('#hint--green');\r\nconst toggleThemeBtn = document.querySelector('#toggle--theme');\r\nconst themeBall = document.querySelector('.ball');\r\n\r\n// Data structures for the game\r\nlet wordRows = [\r\n    [\"\", \"\", \"\", \"\", \"\"],\r\n    [\"\", \"\", \"\", \"\", \"\"],\r\n    [\"\", \"\", \"\", \"\", \"\"],\r\n    [\"\", \"\", \"\", \"\", \"\"],\r\n    [\"\", \"\", \"\", \"\", \"\"],\r\n    [\"\", \"\", \"\", \"\", \"\"],\r\n];\r\nlet currentRow = 0;\r\nlet currentTile = 0;\r\nlet secretWord; \r\nlet gameOver = false;\r\nlet tempDisableAllInput = false;\r\n\r\n// Get random word using fetch API\r\nconst options = {\r\n\tmethod: 'GET',\r\n\theaders: {\r\n\t\t'X-RapidAPI-Host': 'random-words5.p.rapidapi.com',\r\n\t\t'X-RapidAPI-Key': '49e442de95mshc0a2d53e7e9181cp175d85jsnf7691a0e4630'\r\n\t}\r\n};\r\n\r\nfetch('https://random-words5.p.rapidapi.com/getMultipleRandom?count=1&wordLength=5', options)\r\n\t.then(response => response.json())\r\n\t.then(response => secretWord = response[0].toUpperCase())\r\n\t.catch(err => console.error(err));\r\n\r\n// Toggle light and dark theme\r\ntoggleThemeBtn.addEventListener('click', () => {\r\n    const body = document.querySelector('body');\r\n    body.classList.toggle('active--dark');\r\n    themeBall.classList.toggle('toggle--dark');\r\n})\r\n\r\n// Open Modal\r\nbtnOpenModal.addEventListener(\"click\", () => {\r\n    modal.classList.remove(\"hidden\");\r\n    overlay.classList.remove(\"hidden\");\r\n    grayHintTile.classList.add('tile--flip', 'gray--overlay');\r\n    yellowHintTile.classList.add('tile--flip', 'yellow--overlay');\r\n    greenHintTile.classList.add('tile--flip', 'green--overlay');\r\n    tempDisableAllInput = true;\r\n});\r\n\r\n// Close Modal\r\nbtnCloseModal.addEventListener(\"click\", () => {\r\n    modal.classList.add(\"hidden\");\r\n    overlay.classList.add(\"hidden\");\r\n    grayHintTile.classList.remove('tile--flip', 'gray--overlay');\r\n    yellowHintTile.classList.remove('tile--flip', 'yellow--overlay');\r\n    greenHintTile.classList.remove('tile--flip', 'green--overlay');\r\n    tempDisableAllInput = false;\r\n});\r\n\r\n// Add letter to tile\r\nconst addLetter = function (letter) {\r\n    if(gameOver || tempDisableAllInput) return;\r\n\r\n    if (currentRow > 5 || currentTile > 4) return;\r\n\r\n    wordRows[currentRow][currentTile] = letter;\r\n    const tile = document.getElementById(\r\n        `row-${currentRow} tile-${currentTile}`\r\n    );\r\n    currentTile++;\r\n    tile.textContent = letter;\r\n};\r\n\r\n// Delete letter fromt tile\r\nconst deleteLetter = () => {\r\n    if(gameOver || tempDisableAllInput) return;\r\n\r\n    if (currentTile <= 0) return;\r\n\r\n    currentTile--;\r\n    const tile = document.getElementById(\r\n        `row-${currentRow} tile-${currentTile}`\r\n    );\r\n    tile.textContent = \"\";\r\n};\r\n\r\n// Display relevant game message\r\nconst displayMessage = (message) => {\r\n    const messageEl = document.createElement(\"p\");\r\n    messageEl.textContent = message;\r\n    msgContainer.insertAdjacentElement(\"beforeend\", messageEl);\r\n    \r\n    tempDisableAllInput = true;\r\n    setTimeout(() => {\r\n        msgContainer.removeChild(messageEl);\r\n        tempDisableAllInput = false;\r\n        \r\n    }, 3000);\r\n};\r\n\r\n// Display the secret word if lost\r\nconst displayGuess = () => {\r\n    const guessEl = document.createElement(\"p\");\r\n    guessEl.textContent = `The word was ${secretWord}`;\r\n    guessContainer.insertAdjacentElement(\"beforeend\", guessEl);\r\n    setTimeout(() => {\r\n        guessContainer.removeChild(guessEl);\r\n    }, 3000);\r\n}\r\n\r\n// Add gray, yellow and green hints to tiles\r\nconst highlightAnswer = (userAnswer) => {\r\n    if(gameOver) return;\r\n\r\n    let checkSecretWord = secretWord;\r\n    const guess = [];\r\n    const rowTiles = document.getElementById(`guessRow-${currentRow}`).querySelectorAll('.letter--box');\r\n\r\n    rowTiles.forEach(tile => {\r\n        guess.push({ letter: tile.textContent, color: \"gray\" });\r\n    });\r\n\r\n    guess.forEach(guess => {\r\n        if(checkSecretWord.includes(guess.letter)) {\r\n            guess.color = 'yellow';\r\n            checkSecretWord = checkSecretWord.replace(guess.letter, '');\r\n        }\r\n    });\r\n\r\n    guess.forEach((guess, index) => {\r\n        if(guess.letter === secretWord[index]) {\r\n            guess.color = 'green';\r\n            checkSecretWord = checkSecretWord.replace(guess.letter, '');\r\n        }\r\n    });\r\n\r\n    const interval = 500;\r\n    userAnswer.forEach((letter, index) => {\r\n        const curTile = document.getElementById(\r\n            `row-${currentRow} tile-${index}`\r\n        );\r\n        setTimeout(() => {\r\n            curTile.classList.add('tile--flip');\r\n            curTile.classList.add (`${guess[index].color}--overlay`);\r\n            document.getElementById(`${letter}`).classList.add(`${guess[index].color}--overlay`);\r\n        }, interval * index);\r\n    });\r\n\r\n    if (currentRow <= 5) {\r\n        currentRow++;\r\n        currentTile = 0;\r\n    }\r\n    \r\n    tempDisableAllInput = true;\r\n    setTimeout(() => {\r\n        tempDisableAllInput = false;\r\n\r\n        if (userAnswer.join(\"\") === secretWord) {\r\n            displayMessage(\"Wonderful\");\r\n            gameOver = true;\r\n        } else if (currentRow > 5) {\r\n            displayMessage(\"Better Luck Next Time\");\r\n            displayGuess(`The word is ${secretWord}`);\r\n            gameOver = true;\r\n            return;\r\n        }\r\n    }, 5 * interval);\r\n};\r\n\r\n// Check the submitted guess by user\r\nconst checkAnswer = () => {\r\n    if (currentTile < 5 || tempDisableAllInput) return;\r\n\r\n    const userAnswer = wordRows[currentRow].join(\"\");\r\n    highlightAnswer(wordRows[currentRow]);\r\n};\r\n\r\n// Check keypress of on-screen keyboard\r\nconst keyPress = (key) => {\r\n    if (key.getAttribute(\"id\") === \"back-key\") deleteLetter()\r\n    else if (key.getAttribute(\"id\") === \"enter-key\") checkAnswer();\r\n    else addLetter(key.textContent);\r\n};\r\n\r\n// Listen for keypress on on-screen keyboard\r\nkeyboard.forEach((key) => {\r\n    key.addEventListener(\"click\", () => keyPress(key));\r\n});\r\n\r\n// Check if keypress is single letter word \r\nconst isLetter = (char) => {\r\n    if(char.length === 1) return (/[A-Z]/).test(char);\r\n    return false;\r\n}\r\n\r\n// Listen for keypress on local user keyboard\r\ndocument.addEventListener('keydown', (e) => {\r\n    const letter = e.key.toUpperCase();\r\n\r\n    if(e.ctrlKey || e.shiftKey) return;\r\n\r\n    if(isLetter(letter)) addLetter(letter);\r\n\r\n    if(letter === 'ENTER') checkAnswer();\r\n\r\n    if(letter === 'BACKSPACE') deleteLetter();\r\n})\r\n\r\n// Temporarily Disable reset button after resetting game\r\nconst tempDisableReset = () => {\r\n    resetGameBtn.removeEventListener(\"click\", resetGame);\r\n    setTimeout(() => resetGameBtn.addEventListener(\"click\", resetGame), 3000);\r\n}\r\n\r\n// Reset game on pressing reset button\r\nconst resetGame = () => {\r\n    if(tempDisableAllInput) return;\r\n\r\n    displayMessage(\"Game has been reset\");\r\n    tempDisableReset();\r\n\r\n    gameOver = false;\r\n    tempDisableAllInput = false;\r\n    currentRow = 0;\r\n    currentTile = 0;\r\n    wordRows = [\r\n        [\"\", \"\", \"\", \"\", \"\"],\r\n        [\"\", \"\", \"\", \"\", \"\"],\r\n        [\"\", \"\", \"\", \"\", \"\"],\r\n        [\"\", \"\", \"\", \"\", \"\"],\r\n        [\"\", \"\", \"\", \"\", \"\"],\r\n        [\"\", \"\", \"\", \"\", \"\"],\r\n    ];\r\n    \r\n    const tiles = document.querySelectorAll('.letter--box');\r\n    tiles.forEach(tile => {\r\n        tile.textContent = '';\r\n        tile.classList.remove('tile--flip', 'green--overlay', 'yellow--overlay', 'gray--overlay');\r\n    })\r\n\r\n    const keyboardKeys = document.querySelectorAll('.keyboard--key');\r\n    keyboardKeys.forEach(key => {\r\n        key.classList.remove('green--overlay', 'yellow--overlay', 'gray--overlay');\r\n    })\r\n}\r\n\r\n// Button to reset the game\r\nresetGameBtn.addEventListener(\"click\", resetGame);\r\n\r\n"],"names":["$6b17f08f738443dc$var$btnOpenModal","document","querySelector","$6b17f08f738443dc$var$btnCloseModal","$6b17f08f738443dc$var$modal","$6b17f08f738443dc$var$resetGameBtn","$6b17f08f738443dc$var$overlay","$6b17f08f738443dc$var$keyboard","querySelectorAll","$6b17f08f738443dc$var$msgContainer","$6b17f08f738443dc$var$guessContainer","$6b17f08f738443dc$var$grayHintTile","$6b17f08f738443dc$var$yellowHintTile","$6b17f08f738443dc$var$greenHintTile","$6b17f08f738443dc$var$toggleThemeBtn","$6b17f08f738443dc$var$themeBall","$6b17f08f738443dc$var$secretWord","$6b17f08f738443dc$var$wordRows","$6b17f08f738443dc$var$currentRow","$6b17f08f738443dc$var$currentTile","$6b17f08f738443dc$var$gameOver","$6b17f08f738443dc$var$tempDisableAllInput","fetch","method","headers","then","response","json","toUpperCase","catch","err","console","error","addEventListener","classList","toggle","remove","add","$6b17f08f738443dc$var$addLetter","letter","tile","getElementById","textContent","$6b17f08f738443dc$var$deleteLetter","$6b17f08f738443dc$var$displayMessage","message","messageEl","createElement","insertAdjacentElement","setTimeout","removeChild","$6b17f08f738443dc$var$highlightAnswer","userAnswer","checkSecretWord","guess1","forEach","push","color","guess","includes","replace","index","curTile","join","guessEl","$6b17f08f738443dc$var$displayGuess","$6b17f08f738443dc$var$checkAnswer","key","getAttribute","$6b17f08f738443dc$var$keyPress","e","char","ctrlKey","shiftKey","length","test","$6b17f08f738443dc$var$resetGame","removeEventListener"],"version":3,"file":"index.db6f658c.js.map"}